[General]
network = FRERnetwork
sim-time-limit = 100ms
description = "Manual static stream redundancy configuration"
# disable automatic MAC forwarding table configuration
*.macForwardingTableConfigurator.typename = ""

# all Ethernet interfaces have 100 Mbps speed
*.*.eth[*].bitrate = 1000Mbps

# decrease throughput measurement interval
# **.throughput.interval = 10ms

# link breaks between switches
*.scenarioManager.script = xmldoc("scenario.xml")


# enable frame replication and elimination
*.*.hasStreamRedundancy = true

# source application
*.source.numApps = 1
*.source.app[0].typename = "UdpSourceApp"
*.source.app[0].io.destAddress = "destination"
*.source.app[0].io.destPort = 1000
*.source.app[0].source.displayStringTextFormat = "sent %p pk (%l)"
*.source.app[0].source.packetLength = 1200B
*.source.app[0].source.productionInterval = 1ms

# destination application
*.destination.numApps = 1
*.destination.app[0].typename = "UdpSinkApp"
*.destination.app[0].io.localPort = 1000

# all interfaces must have the same address to accept packets from all streams
*.destination.eth[*].address = "0A-AA-12-34-56-78"

# visualizer
*.visualizer.infoVisualizer.modules = "*.source.app[0].source or *.destination.app[0].sink"

# configure all egress traffic as part of stream s1, start sequence numbering
*.source.bridging.streamIdentifier.identifier.mapping = [{packetFilter: "*", stream: "s1", sequenceNumbering: true}]
# encode egress stream s1 to VLAN 1
*.source.bridging.streamCoder.encoder.mapping = [{stream: "s1", vlan: 1}]

# map destination MAC address and VLAN pairs to network interfaces
*.s1.macTable.forwardingTable = [{address: "destination", vlan: 1, interface: "eth1"},
                                 {address: "destination", vlan: 2, interface: "eth2"}]
# allow ingress traffic from VLAN 1
*.s1.ieee8021q.qTagHeaderChecker.vlanIdFilter = [1]
# enable stream policing in layer 2 bridging
*.s1.bridging.streamRelay.typename = "StreamRelayLayer"
*.s1.bridging.streamCoder.typename = "StreamCoderLayer"
# map eth0 VLAN 1 to stream s1
*.s1.bridging.streamCoder.decoder.mapping = [{interface: "eth0", vlan: 1, stream: "s1"}]

# split stream s1 into s2a and s2b
*.s1.bridging.streamRelay.splitter.mapping = {s1: ["s1a", "s1b"]}
# map stream s2a to VLAN 1 and s2b to VLAN 2
*.s1.bridging.streamCoder.encoder.mapping = [{stream: "s1a", vlan: 1},
                                             {stream: "s1b", vlan: 2}]


# enable stream policing in layer 2 bridging
*.s2.bridging.streamRelay.typename = "StreamRelayLayer"
# s2 uses your enhanced sorter:
*.s2.bridging.streamRelay.merger.typename = "StreamMergerSorter"
# record the seqNum signal on the `merger` instance under every s2...
*.s2.bridging.streamRelay.merger.seqNum.record = vector
*.s2.bridging.streamRelay.merger.enableReordering = true
*.s2.bridging.streamRelay.merger.dynamicBuffersize = true
*.s2.bridging.streamRelay.merger.periodicEmission = false
*.s2.bridging.streamRelay.merger.timerInterval = 10ms
*.s2.bridging.streamRelay.merger.senderTransmissionInterval = 1ms
*.s2.bridging.streamRelay.merger.startSequence = 0

# map eth2 VLAN 1 to stream s2a and eth1 VLAN 2 to stream s2b-s2a
*.s2.bridging.streamCoder.decoder.mapping = [{interface: "eth1", vlan: 1, stream: "s1a"},
                                              {interface: "eth2", vlan: 2, stream: "s1b"}]
# map destination MAC address and VLAN pairs to network interfaces
*.s2.macTable.forwardingTable = [{address: "destination", vlan: 1, interface: "eth0"},
                                 {address: "destination", vlan: 2, interface: "eth0"}]

# allow ingress traffic from VLAN 1,2
*.s2.ieee8021q.qTagHeaderChecker.vlanIdFilter = [1, 2]

# merge streams s1a and s1b into null stream
*.s2.bridging.streamRelay.merger.mapping = {s1a: "", s1b: ""}

